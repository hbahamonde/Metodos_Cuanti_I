## Prestige
install.packages("car") # instalemos la base, que viene en la libreria "car"
library(car) # ahora, carguemos la base, que viene en la libreria "car"
## Resumen del df
summary(Prestige)
ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
## Funcion if/else
Prestige$prestige.2<-ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
## Revisemos
View(Prestige)
## Etiquetas:
is(Prestige$type) # que es?
Prestige$type
levels(Prestige$type) #
colnames(Prestige)
Prestige.drop.1 = select(Prestige,-c(type, census, prestige))
colnames(Prestige.drop.1)
### OK. DF1 tendra todo menos type, census, prestige
Prestige.drop.1 = select(Prestige,-c(type, census, prestige))
library(dplyr)
### OK. DF1 tendra todo menos type, census, prestige
Prestige.drop.1 = select(Prestige,-c(type, census, prestige))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos type, census, prestige
Prestige.drop.2 = select(Prestige,-c(education, income))
colnames(Prestige.drop.2)
View(Prestige.drop.2)
### OK. DF1 tendra todo menos type, census, prestige
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, prestige.2))
colnames(Prestige.drop.1)
colnames(Prestige.drop.2)
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, prestige.2))
colnames(Prestige.drop.1)
Prestige.drop.2 = select(Prestige,-c(education, women))
colnames(Prestige.drop.2)
### Porblema: ahora queremos hacer un "merge" de las dos DF's. El unico elemento en comun, es la variable "income"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2,by=c("income"))
Prestige.merge
Prestige.merge = Prestige
library(car) # ahora, carguemos la base, que viene en la libreria "car"
load(Prestige)
## Prestige
install.packages("car") # instalemos la base, que viene en la libreria "car"
library(car) # ahora, carguemos la base, que viene en la libreria "car"
View(Prestige)
Prestige.alto <- Prestige[!(Prestige$prestige.2=="Alto"),]
View(Prestige.alto)
Prestige.alto <- Prestige[!(Prestige$prestige.2=="alto"),]
Prestige.alto <- Prestige[(Prestige$prestige.2=="alto"),]
append (Prestige.alto, Prestige.bajo)
Prestige.alto <- Prestige[(Prestige$prestige.2=="alto"),]
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más bajo.
Prestige.bajo <- Prestige[(Prestige$prestige.2=="bajo"),]
## Hemos partido el DF "Prestige" en dos. Ahora, volvamos a juntar ambas
append (Prestige.alto, Prestige.bajo)
append(Prestige.alto, Prestige.bajo)
## Hemos partido el DF "Prestige" en dos. Ahora, volvamos a juntar ambas. Usemos las funcion "append"
append(Prestige.alto, Prestige.bajo)
is(append(Prestige.alto, Prestige.bajo))
data.frame(append(Prestige.alto, Prestige.bajo))
## Hemos partido el DF "Prestige" en dos. Ahora, volvamos a juntar ambas. Usemos las funcion "rbind" (por "row bind", que "pegador de filas")
rbind(Prestige.alto, Prestige.bajo) # Ups. El output es una lista. Es?
is(rbind(Prestige.alto, Prestige.bajo)) # Si, es una lista. Pero nosotros necesitamos un dataframe (o "base de datos").
## Hemos partido el DF "Prestige" en dos. Ahora, volvamos a juntar ambas. Usemos las funcion "rbind" (por "row bind", que "pegador de filas")
Prestige.nuevo = rbind(Prestige.alto, Prestige.bajo) # Ups. El output es una lista. Es?
Prestige.nuevo
hist(Prestige$women)
log(Prestige$women)
hist(Prestige$women, breaks=100)
# Debido a este problema, tendremos que calcular el log de la variable "women"
log(Prestige$women)
# creemos otra variable ("women.log") que sea el logaritmo natural (de base 10), y peguemosla en la base de datos Prestige
Prestige$women.log  = log(Prestige$women) #
Prestige$women.log
Prestige$women+1
# creemos otra variable ("women.log") que sea el logaritmo natural (de base 10), y peguemosla en la base de datos Prestige
Prestige$women.log  = log(Prestige$women+1) #
Prestige$women.log
# creemos otra variable ("women.log") que sea el logaritmo natural (de base 10), y peguemosla en la base de datos Prestige
## Primero, debenmos solucionar nuestro problema. Sumemos 1 a la variable women
Prestige$women.mas.uno = Prestige$women+1
Prestige$women.mas.uno
# creemos otra variable ("women.log") que sea el logaritmo natural (de base 10), y peguemosla en la base de datos Prestige
# Pero primero, debenmos solucionar nuestro problema. Sumemos 1 a la variable women
Prestige$women.mas.uno = Prestige$women+1
## Inspeccionemos...
head(Prestige$women.mas.uno, Prestige$women)
## Inspeccionemos...
head(Prestige$women.mas.uno, Prestige$women, 10)
Prestige$women.mas.uno
Prestige$women
## Inspeccionemos...
c(Prestige$women.mas.uno, Prestige$women, 10)
head
help(head)
## Inspeccionemos...
head(Prestige$women.mas.uno, Prestige$women, n = 6)
## Inspeccionemos...
c(Prestige$women.mas.uno, Prestige$women)
## Inspeccionemos...
head(Prestige)
# 5. Por que esto soliona nuestro problema?
# 6. Cual es el log de 1?
Prestige$log.women.mas.uno = log(Prestige$women.mas.uno)
head(Prestige)
hist(Prestige$log.women.mas.uno) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$log.women.mas.uno, breaks = 100) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$women)
hist(Prestige$log.women.mas.uno, breaks = 100) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$women)
hist(Prestige$log.women.mas.uno, breaks = 100) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
## Creemos una variable que diga si el sueldo ('income") es "alto" o "bajo"
Prestige$income.categorical<-ifelse(Prestige$income > mean(Prestige$income), "alto","bajo")
Prestige$income.categorical
## Grafiquemos
plot(Prestige$income.categorical)
gl(2, 4, 8)
as.factor(Prestige$income.categorical)
# Ups..error. R no entiende, porque "alto" y "bajo" es texto. Añadamos "levels" (o "etiquetas" que R pueda entender).
Prestige$income.categorical = as.factor(Prestige$income.categorical)
Prestige$income.categorical
# Ahora si, grafiquemos.
plot(Prestige$income.categorical)
# Hay alguna relacion entre genero y sueldo? Veamos...
plot(Prestige$income.categorical, Prestige$women )
# Hay alguna relacion entre genero y sueldo? Veamos...
Prestige$woman.categorical<-ifelse(Prestige$woman > mean(Prestige$woman), "alto","bajo")
Prestige$woman
Prestige$women
# Hay alguna relacion entre genero y sueldo? Veamos...
Prestige$women.categorical<-ifelse(Prestige$women > mean(Prestige$women), "alto","bajo")
Prestige$women.categorical
plot(Prestige$income.categorical, women.categorical)
is(Prestige$women.categorical)
## Convirtamos esta nueva variable en categorica
Prestige$women.categorical = as.facto(Prestige$women.categorical)
## Convirtamos esta nueva variable en categorica
Prestige$women.categorical = as.factor(Prestige$women.categorical)
plot(Prestige$income.categorical, Prestige$women.categorical)
## Creemos una variable que diga si el sueldo ('income") es "alto" o "bajo"
Prestige$income.categorical<-ifelse(Prestige$income > mean(Prestige$income), "alto.sueldo","bajo.sueldo")
## Grafiquemos variables categoricas o cualitativas (o "factors" en lenguaje R). Son todos sinonimos: categoricas = cualitativas = factors.
plot(Prestige$income.categorical)
# Ups..error. R no entiende, porque "alto" y "bajo" es texto. Añadamos "levels" (o "etiquetas" que R pueda entender).
Prestige$income.categorical = as.factor(Prestige$income.categorical)
Prestige$income.categorical #  Fijate que abajo dice "Levels...". Ok.
# Ahora si, grafiquemos.
plot(Prestige$income.categorical)# Ok, este HISTOGRAMA dice que tenemos mas sueldos bajos.
# Hay alguna relacion entre genero y sueldo? Veamos...
## Primero, creemos una variable donde si cierta profesion tiene mas mujeres que el promedio, es "alto." Si no, es "bajo"
Prestige$women.categorical<-ifelse(Prestige$women > mean(Prestige$women), "alto.mujer","bajo.mujer")
## Que tipo de variable acabamos de crear?
is(Prestige$women.categorical) # "Character", es decir, texto. No nos sirve para hacer analisis.
## Convirtamos esta nueva variable en categorica
Prestige$women.categorical = as.factor(Prestige$women.categorical)
plot(Prestige$income.categorical, Prestige$women.categorical)
## Este es un grafico histograma entre dos variables categoricas (o "factors").
## Que hubiera pasado si hubieramos ploteado una categorica (income/sueldo) con la version numerica de women? Veamos...
plot(Prestige$income.categorical, Prestige$women) # Que podemos concluir?
head(Prestige)
plot(Prestige$prestige, Prestige$income)
plot(log(Prestige$prestige), log(Prestige$income)) # Que podemos concluir?
plot(Prestige$income.categorical)# Ok, este HISTOGRAMA dice que tenemos mas sueldos bajos.
barplot(Prestige$income.categorical, Prestige$women.categorical) # Que podemos concluir?
help(barplot)
barplot(Prestige$income, Prestige$women) # Que podemos concluir?
head(yt.views)
??head(yt.views)
??yt.views
scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
scan("http://robjhyndman.com/tsdldata/misc/kings.dat")
scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))
souvenirtimeseries
View(souvenirtimeseries)
is(souvenirtimeseries)
## Inspeccionemos la "base datos"
Summary(souvenirtimeseries)
## Inspeccionemos la "base datos"
summary(souvenirtimeseries)
is(souvenirtimeseries)
View(as.data.frame(souvenirtimeseries))
# Plotiemos
plot.ts(souvenirtimeseries)
# Plotiemos
plot.forecast(souvenirtimeseries)
# Plotiemos
options(scipen=999)
plot.ts(souvenirtimeseries)
# Plotiemos
options(scipen=1)
plot.ts(souvenirtimeseries)
library("forecast")
install.packages(forecast)
install.packages("forecast")
library("forecast")
HoltWinters(souvenirtimeseries, beta=FALSE, gamma=FALSE)
rainseriesforecasts = HoltWinters(souvenirtimeseries, beta=FALSE, gamma=FALSE)
rainseriesforecasts
plot(rainseriesforecasts)
rainseriesforecasts2 <- forecast.HoltWinters(rainseriesforecasts, h=8)
library("forecast")
rainseriesforecasts2 <- forecast.HoltWinters(rainseriesforecasts, h=8)
souvenir
############################################
# Scatter: pero ahora en GGPLOT
############################################
install.package("ggplot2")
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
library(ggplot2)
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
options(scipen=999)
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point()
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() + geom_smooth(method="lm")
# Altamente customizable
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col="steelblue", size=3) + geom_smooth(method="lm")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col=state, size=3) + geom_smooth(method="lm")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3) + geom_smooth(method="lm")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3, alpha=0.5) + geom_smooth(method="lm")
head(midwest)
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3, alpha=0.5, shape = popasian) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3, alpha=0.5, shape = popasian) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state, shape = popasian), size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
colnames(midwest)
View(midwest)
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state, shape = red), size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state, colour = red), size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state, colour = "red"), size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw()
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area Vs Poblacion", y="Poblacion", x="Area", caption="Base de datos Midwest")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area Vs Poblaci\'on", y="Poblacion", x="Area", caption="Base de datos Midwest")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area Vs Población", y="Poblacion", x="Area", caption="Base de datos Midwest")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area y Población", y="Población", x="Área", caption="Base de datos `Midwest`")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'") + scale_color_discrete(name="State")
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() #
### que columnas tiene el DF Prestige?
colnames(Prestige)
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
install.packages("car") # instalemos la base de datos, que viene en la libreria "car"
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
## Resumen del df
summary(Prestige)
head(Prestige)
## Veamos como se ve toda la base...tendremos la vista de "Excel".
View(Prestige)
## Funcion if/else
Prestige$prestige.2<-ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
## Revisemos
View(Prestige)
## Etiquetas (o "levels")
is(Prestige$type) # que es?
levels(Prestige$type) # que etiquetas tiene?
## Recodificar: de ENG a ESP
install.packages("plyr")
library(plyr)
Prestige$type.2 <- revalue(Prestige$type, c("bc"="tecnico", "prof"="profesional", "wc"="oficinista"))
Prestige$type.2
## Funcion Drop
install.packages("dplyr")
library(dplyr)
### que columnas tiene el DF Prestige?
colnames(Prestige)
### OK. DF1 tendra todo menos type, census, prestige y prestige.2
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, prestige.2))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos type, census, prestige
Prestige.drop.2 = select(Prestige,-c(education, women))
colnames(Prestige.drop.2)
### Porblema: ahora queremos hacer un "merge" (*pegar columnas*) de las dos DF's. El unico elemento en comun, es la variable "income".
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2,by=c("income"))
is(Prestige.merge = Prestige)
3=3
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más altas. Usemos la var que habiamos creado antes ("prestige.2").
Prestige.alto <- Prestige[(Prestige$prestige.2=="alto"),]
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más bajo.
Prestige.bajo <- Prestige[(Prestige$prestige.2=="bajo"),]
Prestige.bajo
Prestige.alto
## Hemos partido el DF "Prestige" en dos. Ahora, volvamos a juntar ambas. Usemos las funcion "rbind" (por "row bind", que "pegador de filas")
Prestige.nuevo = rbind(Prestige.alto, Prestige.bajo)
all(Prestige.merge, Prestige)
all(Prestige.merge == Prestige)
Prestige.merge
Prestige
Prestige.merge
all_vars(Prestige.merge == Prestige)
all.names(Prestige.merge == Prestige)
hist(Prestige$women) # Grafico Basico: "histograma". Plotiemos el % de mujeres en las distintas profesiones. Notas algo raro?
hist(Prestige$women, breaks=100) # Veamos esto con mas detalles. Agreguemos mas breaks (cortes, en columnas). Notas algo raro?
# Debido a este problema, tendremos que calcular el log de la variable "women"
## 1. Qué es el logaritmo de un numero?
## 2. Por qué necesitamos sacarlo?
## 3. Cual es el progblema que tenemos abajo?
log(Prestige$women) # que problema tenemos?
# creemos otra variable ("women.log") que sea el logaritmo natural (de base 10), y peguemosla en la base de datos Prestige
# Pero primero, debenmos solucionar nuestro problema. Sumemos 1 a la variable women
Prestige$women.mas.uno = Prestige$women+1
## Inspeccionemos...
head(Prestige)
# 5. Por que esto soliona nuestro problema?
# 6. Cual es el log de 1?
Prestige$log.women.mas.uno = log(Prestige$women.mas.uno)
head(Prestige) # Veamos...
hist(Prestige$log.women.mas.uno, breaks = 100) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$log.women.mas.uno, breaks = 10) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$women, breaks = 10) # Comparemos con antes
## Prestige
install.packages("car") # instalemos la base, que viene en la libreria "car"
library(car) # ahora, carguemos la base, que viene en la libreria "car"
## Creemos una variable que diga si el sueldo ('income") es "alto" o "bajo"
Prestige$income.categorical<-ifelse(Prestige$income > mean(Prestige$income), "alto.sueldo","bajo.sueldo")
Prestige$income.categorical
## Grafiquemos variables categoricas o cualitativas (o "factors" en lenguaje R). Son todos sinonimos: categoricas = cualitativas = factors.
plot(Prestige$income.categorical)
Prestige$income
mean(Prestige$income)
ifelse(Prestige$income > mean(Prestige$income), "alto.sueldo","bajo.sueldo")
as.factor(Prestige$income.categorical)
# Ups..error. R no entiende, porque "alto" y "bajo" es texto. Añadamos "levels" (o "etiquetas" que R pueda entender).
Prestige$income.categorical = as.factor(Prestige$income.categorical)
Prestige$income.categorical #  Fijate que abajo dice "Levels...". Ok.
# Ahora si, grafiquemos.
plot(Prestige$income.categorical)# Ok, este HISTOGRAMA dice que tenemos mas sueldos bajos.
## Primero, creemos una variable donde si cierta profesion tiene mas mujeres que el promedio, es "alto." Si no, es "bajo"
Prestige$women.categorical<-ifelse(Prestige$women > mean(Prestige$women), "alto.mujer","bajo.mujer")
## Que tipo de variable acabamos de crear?
is(Prestige$women.categorical) # "Character", es decir, texto. No nos sirve para hacer analisis.
## Convirtamos esta nueva variable en categorica
Prestige$women.categorical = as.factor(Prestige$women.categorical)
## Plotiemos
plot(Prestige$income.categorical, Prestige$women.categorical) # Que podemos concluir?
## Este es un grafico histograma entre dos variables categoricas (o "factors").
## Que hubiera pasado si hubieramos ploteado una categorica (income/sueldo) con la version numerica de women? Veamos...
plot(Prestige$income.categorical, Prestige$women) # Este es un boxplot..."grafico de cajas".
plot(Prestige$prestige, Prestige$income) # Que podemos concluir?
############################################
# Density Plots
############################################
install.packages("dslabs")
library("dslabs")
data("heights")
ggplot(aes(height, fill=sex)) +
geom_density(alpha = 0.2)
data("heights")
ggplot(aes(height, fill=sex)) +
geom_density(alpha = 0.2)
heights %>%
ggplot(aes(height, fill=sex)) +
geom_density(alpha = 0.2)
############################################
# Density Plots
############################################
install.packages("dslabs", "ggplot2")
install.packages("ggplot2")
library(ggplot2)
data("heights")
ggplot(aes(height, fill=sex)) +
geom_density(alpha = 0.2)
heights %>%
ggplot(aes(height, fill=sex)) +
geom_density(alpha = 0.2)
height
heights
ggplot(heights, aes(height, fill=sex)) +
geom_density(alpha = 0.2)
## Veamos las ventas mensuales de una tienda de regalos en un hotel en Australia.
## Los datos van de 1987 hasta 1993.
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat") # R permite cargar bases de datos directamente de Internet.
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1)) # declarar que el objeto "souvenir" (que no es nada mas q una secuencia de numeros, es un objeto de series de tiempo. El intervalo es 12 meses al año, comienza en Enero de 1987)
souvenirtimeseries
## Inspeccionemos la "base datos"
summary(souvenirtimeseries) # mmm. se ve raro... que tipo de objeto sera este?
is(souvenirtimeseries) # "ts" significa "time series", o "series de tiempo"...
# Plotiemos
plot.ts(souvenirtimeseries) # El Y-axis esta en notacion cientifica. Apaguemosla subiendo el umbral, poniendo un numero arbitrariamente alto.
options(scipen=999)
plot.ts(souvenirtimeseries) # Ahora plotemos de nuevo.
# instalar libreria
install.packages("ggplot2")
# cargar libreria
library(ggplot2)
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() # Logeado
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() + geom_smooth(method="lm") # con linea
# Altamente customizable
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col="steelblue", size=3) + geom_smooth(method="lm") # Color azul
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3) + geom_smooth(method="lm") # Color by state
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") # Forma del punto, segun estado.
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() #  Cambio de "tema de colores"
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'") # Cambio en los titulos de los ejes.
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos). Este tipo de graficos se usa cuando queremos observar la relacion ente dos variables. Aqui no vemos que haya una relacion clara.
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# instalar librerias (OJO: podemos cargamos varias al mismo tiempo, si lo hacemos escribiendo un vector "c" ).
install.packages(c("rgeos", "cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
# cargamos algunas de estas librerias
library("ggplot2")
theme_set(theme_bw()) # seteamos el tema "black and white" para no tener ese fondo plomo que siempre tiene GGPLOT. Se ve mejor, mas limpio.
library("sf")
library("rnaturalearth") # libreria con todos los mapas del mundo
library("rnaturalearthdata") # libreria complementaria de "rnaturalearth"
#
world <- ne_countries(scale = "medium", returnclass = "sf")
# grafico basico del mundo
ggplot(data = world) + geom_sf()
# agreguemosle un poco de color...
ggplot(data = world) + geom_sf(color = "black", fill = "lightgreen") # pero esta coloracion no aporta mucha informacion...
# agreguemosle un poco de color...pero con algo mas de significado.
ggplot(data = world) + geom_sf(aes(fill = pop_est)) + scale_fill_viridis_c(option = "plasma", trans = "sqrt") # poblacion estimada.
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12))
# Plot mas complejo de Sudamerica
world_points<- st_centroid(world) # declaremos los nombres de los paises segun coordenadas.
world_points # veamos...
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry))) # "column bind" (haciendo MERGE...nuestra base de datos con latitud/longitud, y otra base con "world_points", es decir, nombres de los paises)
# ahora ocupemos la misma base de datos para plotear Sudametica, pero con el nombre de los paises.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12)) + geom_text(data= world_points,aes(x=X, y=Y, label=name), color = "darkblue", fontface = "bold", check_overlap = FALSE)
