10^2
(3+3)/2
as.Date('1/15/2001',format='%m/%d/%Y')
as.Date('1/15/2001',format='%m/%d/%Y')
a>b
a = as.Date('1/15/2001',format='%m/%d/%Y')
b = as.Date('1/16/2001',format='%m/%d/%Y')
c = as.Date('1/17/2001',format='%m/%d/%Y')
a>b
plot(a,b,c)
ts.plot(a,b,c)
base.de.datos <- data.frame(
diabetico = c(TRUE, FALSE, TRUE, FALSE),
kilos = c(65, 69, 71, 73))
base.de.datos
base.de.datos[3,2] # fila 3, columna 2
base.de.datos[,"diabetico"] # todas las filas de la columna "diabetico"
## Nombres de las Columnas
colnames(base.de.datos)
## Cambiar el nombre de las columnas
colnames(base.de.datos) <- c("diabetico", "edad")
## Comprueba...
colnames(base.de.datos)
base.de.datos
## Resumen del df
summary(base.de.datos)
c(10, seq(5, 1, -1))
library(car) # carguemos la base, que viene en la lubreria "car"
library("car") # carguemos la base, que viene en la lubreria "car"
## Prestige
install.packages("car") # Esta es la libreria de graficos mas potentes que existe.
## Resumen de la base
summary(Prestige)
## Veamos como se ve toda la base
View(Prestige)
labels(Prestige)
## Veamos como se ve toda la base
View(Prestige)
### que columnas tiene el DF Prestige?
colnames(Prestige)
library(car) # ahora, carguemos la base, que viene en la libreria "car"
## Prestige
install.packages("car") # instalemos la base, que viene en la lubreria "car"
library(car) # ahora, carguemos la base, que viene en la libreria "car"
### que columnas tiene el DF Prestige?
colnames(Prestige)
### OK. DF1 tendra todo menos type, census, prestige
Prestige.drop.1 = select(Prestige,-c(type, census, prestige))
## Funcion Drop
install.packages("dplyr")
library(Dplyr)
library(dplyr)
### OK. DF1 tendra todo menos type, census, prestige
Prestige.drop.1 = select(Prestige,-c(type, census, prestige))
Prestige.drop.1
colnames(Prestige.drop.1)
### que columnas tiene el DF Prestige?
colnames(Prestige)
### OK. DF2 tendra todo menos type, census, prestige
Prestige.drop.2 = select(Prestige,-c(education, income))
colnames(Prestige.drop.2)
merge(Prestige.drop.1, Prestige.drop.2,by=c("woman"))
Prestige.drop.1
colnames(Prestige.drop.1)
colnames(Prestige.drop.2)
merge(Prestige.drop.1, Prestige.drop.2,by=c("women"))
## ---- earthquake:map:data:chile ----
## packages
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(rgdal, foreign, rgeos, ggplot2)
# load shape file
chile.provinces <- readOGR(dsn = "/Users/hectorbahamonde/RU/Data/shape_files/division_provincial",
layer = "division_provincial",
verbose = FALSE)
#chile.provinces <- gSimplify(chile.provinces, tol=10000, topologyPreserve=T)
chile.provinces <- spTransform(chile.provinces, CRS("+proj=longlat +datum=WGS84"))
chile.provinces <- fortify(chile.provinces)
# chile.provinces <- chile.provinces[!(chile.provinces$long <= -76),]
# load eq data
load("/Users/hectorbahamonde/RU/Dissertation/Papers/Earthquake_Paper/eq_output_d_Chile.RData")
# rename df
dat.chile = dat
#dat.chile <- dat.chile[!(dat.chile$Longitude <= -76),]
dat.chile = dat.chile[!is.na(dat.chile$Magnitude),]
dat.chile = dat.chile[!is.na(dat.chile$Deaths),]
dat.chile = dat.chile[!is.na(dat.chile$Sector),]
dat.chile = dat.chile[!is.na(dat.chile$Population),]
dat.chile = dat.chile[!is.na(dat.chile$Latitude),]
dat.chile = dat.chile[!is.na(dat.chile$Longitude),]
dat.chile = dat.chile[!is.na(dat.chile$Urban),]
chile.map.plot.d <- data.frame(
Longitude = na.omit(dat.chile$Longitude),
Latitude = na.omit(dat.chile$Latitude),
Magnitude = na.omit(dat.chile$Magnitude),
Sector = na.omit(dat.chile$Sector),
Year = na.omit(dat.chile$year))
# chile.map.plot.d$Sector<- as.character(chile.map.plot.d$Sector)
# chile.map.plot.d$Sector[chile.map.plot.d$Sector==""] <- NA
# chile.map.plot.d$Sector <- as.factor(chile.map.plot.d$Sector)
# prepare DF for plot
chile.map.plot.d = data.frame(na.omit(chile.map.plot.d));rownames(chile.map.plot.d) <- NULL
# plot
earthquake.map.plot.chile = ggplot() +
geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.05, color='black', data=chile.provinces, alpha=1/2) +
theme_bw() +
ggtitle(NULL) +
geom_point(data=chile.map.plot.d, aes(x=Longitude, y=Latitude,colour=Sector, shape=as.factor(round(chile.map.plot.d$Magnitude,0)))) +#shape=21,
scale_y_continuous(name='Latitude') +
scale_x_continuous(name='Longitude') +
scale_shape_discrete(name="Rounded\nMagnitude") +
theme(axis.text.y = element_text(size=7),
axis.text.x = element_text(size=7),
axis.title.y = element_text(size=7),
axis.title.x = element_text(size=7),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
plot.title = element_text(size=7),
legend.position="bottom")
## ----
## packages
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(rgdal, foreign, rgeos, ggplot2)
# load eq data
load("/Users/hectorbahamonde/RU/Dissertation/Papers/Earthquake_Paper/Peru_Data_Earthquake.RData")
# load shape file
peru.provinces <- readOGR(dsn = "/Users/hectorbahamonde/RU/Data/shape_files/peru_provinces/Limite_provincial", layer = "BAS_LIM_PROVINCIA")
#peru.provinces <- gSimplify(peru.provinces, tol=10000, topologyPreserve=T)
peru.provinces <- spTransform(peru.provinces, CRS("+proj=longlat +datum=WGS84"))
peru.provinces <- fortify(peru.provinces)
#peru.provinces <- peru.provinces[!(peru.provinces$long <= -76),]
peru.map = ggplot() +
geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.05, color='black', data=peru.provinces, alpha=1/2) +
theme_bw() +
ggtitle("Peru") +
geom_point(data=subset(dat.peru, year>=1900), aes(x=Longitude, y=Latitude, size=Magnitude), color="red", shape=21)
# grid_arrange_shared_legend function
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
### plot both countries
grid_arrange_shared_legend(chile.map, peru.map, ncol = 1, nrow = 2)
### plot both countries
p_load(grid)
grid.draw(cbind(ggplotGrob(chile.map), ggplotGrob(peru.map), size="last"))
# load shape file
peru.provinces <- readOGR(dsn = "/Users/hectorbahamonde/RU/Data/shape_files/peru_provinces/Limite_provincial", layer = "BAS_LIM_PROVINCIA")
#peru.provinces <- gSimplify(peru.provinces, tol=10000, topologyPreserve=T)
peru.provinces <- spTransform(peru.provinces, CRS("+proj=longlat +datum=WGS84"))
peru.provinces <- fortify(peru.provinces)
peru.map = ggplot() +
geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.05, color='black', data=peru.provinces, alpha=1/2) +
theme_bw() +
ggtitle("Peru") +
geom_point(data=subset(dat.peru, year>=1900), aes(x=Longitude, y=Latitude, size=Magnitude), color="red", shape=21)
# grid_arrange_shared_legend function
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
### plot both countries
grid_arrange_shared_legend(chile.map, peru.map, ncol = 1, nrow = 2)
chile.map
peru.map
earthquake.map.plot.chile
